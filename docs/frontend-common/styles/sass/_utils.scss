/**
 * @description 本文件旨在封装各种 css 函数
 */

// #region textOverflow
/**
 * @description 文字溢出处理-
 * @param { number } $line 行数限制
 */
// #endregion textOverflow
@mixin textOverflow($line: 1) {
  overflow: hidden;
  @if ($line == 1) {
    white-space: nowrap;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}

// #region safeTop
/**
   * @description IOS 开启顶部安全距离
   * @param { boolean } $isMargin 是否启动 margin（否则使用 padding，默认 false）
   */
// #endregion safeTop
@mixin safeTop($isMargin: false) {
  @if ($isMargin) {
    margin-top: constant(safe-area-inset-top);
    margin-top: env(safe-area-inset-top);
  } @else {
    padding-top: constant(safe-area-inset-top);
    padding-top: env(safe-area-inset-top);
  }
}

// #region safeBottom
/**
   * @description IOS 开启底部安全距离
   * @param { boolean } $isMargin 是否启动 margin（否则使用 padding，默认 false）
   */
// #endregion safeBottom
@mixin safeBottom($isMargin: false) {
  @if ($isMargin) {
    margin-bottom: constant(safe-area-inset-bottom);
    margin-bottom: env(safe-area-inset-bottom);
  } @else {
    padding-bottom: constant(safe-area-inset-bottom);
    padding-bottom: env(safe-area-inset-bottom);
  }
}

// #region zIndex
/**
 * @description 解决在ios下 z-index 不生效（原因是设置了-webkit-overflow-scrolling: touch）
 * @param {number} $z-index 层级设置
 */
// #endregion zIndex
@mixin zIndex($z-index) {
  // 这里是给chrome用的
  z-index: $z-index;
  // 这里是给safari用的
  transform: translateZ($z-index + px);
}

// #region autoFontFamily
/**
 * @description 解决字体 fallback 问题
 * @param {string} $fontFamily 字体
 */
// #endregion autoFontFamily
@mixin autoFontFamily($fontFamily) {
  // 无法确认 MiSans 字体名称是否正确，目前 MiSans 字体均无效
  $fontFamilyMap: (
    PingFangSC-Ultralight: MiSans-ExtraLight,
    PingFangSC-Thin: MiSans-Thin,
    PingFangSC-Light: MiSans-Light,
    PingFangSC-Regular: MiSans-Regular,
    PingFangSC-Medium: MiSans-Medium,
    PingFangSC-Semibold: MiSans-SemiBold,
  );
  font-family: $fontFamily, PingFang SC, MiSans, system-ui, -apple-system, Helvetica, Arial, sans-serif;
  @supports not (-webkit-touch-callout: none) {
    // 非 ios 设备
    @if (map-has-key($fontFamilyMap, $fontFamily)) {
      font-family: map-get($fontFamilyMap, $fontFamily), PingFang SC, MiSans, system-ui, -apple-system, Helvetica, Arial, sans-serif;
    }
  }
}

// #region autoFontWeight
/**
 * @description 解决在安卓下的很多字体对 font-weight 支持度较少的情况
 * @param {number} $number 值
 */
// #endregion autoFontWeight
@mixin autoFontWeight($number) {
  font-weight: $number;
  @supports not (-webkit-touch-callout: none) {
    // 非 ios 设备
    @if ($number > 400) {
      font-weight: bold;
    } @else {
      font-weight: normal;
    }
  }
}

// #region setBackgroundImage
// !!! 使用之前，一定要仔细看！（对图片名字带有约定要求）
/**
   * @description 处理图片分辨率问题，如果你使用的是svg，则不应该使用该函数（原理：根据图片名称，自动加入不同分辨率的图片）
   * @param {string} $imgName 图片名称（需要带后缀名，注意名称不能带.，同时该图片应当是目前最低的分辨率，同时图片的名称需要固定写法）
   * @param {string} $theme 当前的主题（会自动拼接到路径上）
   * @param {string} $imgFolder 图片路径（根据项目你应该使其有个默认值）
   * @example @include judgeImg('test.png','@/icons');（注意:这个时候你需要有 test.png、test@2x.png、test@3x.png ）
   * @example @include judgeImg('test@2x.png','@/icons');（注意:这个时候你需要有 test@2x.png、test@3x.png、test@4x.png ）  
   */
// #endregion setBackgroundImage
@mixin setBackgroundImage($imgName, $theme: '', $imgFolder: '@/assets/images') {
  $resolutionFlag: str-index($imgName, '@');
  // 首级的分辨率（默认为 1，根据 $imgName 传入值也会发生改变）
  $currentNumber: 1;
  // . 当前的位置
  $suffixIndex: str-index($imgName, '.');
  // 计算当前的所传图片的分辨率（最低分辨率）
  @if ($resolutionFlag) {
    $currentNumber: unquote(str-slice($imgName, $suffixIndex - 2, $suffixIndex - 2));
  } @else {
    $currentNumber: 1;
  }
  $imgSrcFor1x: '';
  $imgSrcFor2x: '';
  $imgSrcFor3x: '';
  @if ($currentNumber == 1) {
    $imgSrcFor1x: $imgFolder + '/' + str-insert($imgName, $theme, $suffixIndex);
  } @else {
    $imgName: str-slice($imgName, 0, $resolutionFlag - 1) + str-slice($imgName, $resolutionFlag + 3);
    $suffixIndex: str-index($imgName, '.');
    $imgSrcFor1x: $imgFolder + '/' + str-insert($imgName, $theme + '@' + $currentNumber + 'x', $suffixIndex);
  }
  $currentNumber: to-number($currentNumber);
  $imgSrcFor2x: $imgFolder + '/' + str-insert($imgName, $theme + '@' + ($currentNumber + 1) + 'x', $suffixIndex);
  $imgSrcFor3x: $imgFolder + '/' + str-insert($imgName, $theme + '@' + ($currentNumber + 2) + 'x', $suffixIndex);
  & {
    background-image: url('' + $imgSrcFor1x);
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
  }
  & {
    @media only screen and (-webkit-min-device-pixel-ratio: 2) {
      background-image: url('' + $imgSrcFor2x);
    }
  }
  & {
    @media only screen and (-webkit-min-device-pixel-ratio: 3) {
      background-image: url('' + $imgSrcFor3x);
    }
  }
}

@mixin setBackgroundImageForTheme($imgName) {
  @include setBackgroundImage($imgName);
  &.dark {
    @include setBackgroundImage($imgName, '_dark');
  }
}

// #region thinBorder
/**
    * @description 处理 1px 问题（原理：利用伪元素画出一个 div，再将这个 div 进行取消互动事件以及局部缩放处理）
    * @param {string|List} $directionMaps 边框位置（top,bottom,left,right）
    * @param {string} $color 颜色
    * @param {string|List} $radius 圆角边框
    * @param {string} $position（after,before）
    * @example 单边 thinBorder(top,red)
    * @example 多边 thinBorder((top,left),red)
    * @example 圆角 thinBorder(top, red, 100px)
    */
// #endregion thinBorder
@mixin thinBorder(
  $directionMaps: bottom,
  $color: var(--color-separator10),
  $radius: (
    0,
    0,
    0,
    0,
  ),
  $position: after
) {
  // 是否只有一个方向
  $isOnlyOneDir: string==type-of($directionMaps);

  @if ($isOnlyOneDir) {
    $directionMaps: ($directionMaps);
  }

  @each $directionMap in $directionMaps {
    border-#{$directionMap}: 1px solid $color;
  }

  // 判断圆角是list还是number
  @if (list==type-of($radius)) {
    border-radius: nth($radius, 1) nth($radius, 2) nth($radius, 3) nth($radius, 4);
  } @else {
    border-radius: $radius;
  }

  @media only screen and (-webkit-min-device-pixel-ratio: 2) {
    & {
      position: relative;

      // 删除1像素密度比下的边框
      @each $directionMap in $directionMaps {
        border-#{$directionMap}: none;
      }
    }

    &:#{$position} {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      display: block;
      width: 200%;
      height: 200%;
      transform: scale(0.5);
      box-sizing: border-box;
      padding: 1px;
      transform-origin: 0 0;
      pointer-events: none;
      border: 0 solid $color;

      @each $directionMap in $directionMaps {
        border-#{$directionMap}-width: 1px;
      }

      // 判断圆角是list还是number
      @if (list==type-of($radius)) {
        border-radius: nth($radius, 1) * 2 nth($radius, 2) * 2 nth($radius, 3) * 2 nth($radius, 4) * 2;
      } @else {
        border-radius: $radius * 2;
      }
    }
  }

  @media only screen and (-webkit-min-device-pixel-ratio: 3) {
    &:#{$position} {
      width: 300%;
      height: 300%;
      transform: scale(0.3333);

      // 判断圆角是list还是number
      @if (list==type-of($radius)) {
        border-radius: nth($radius, 1) * 3 nth($radius, 2) * 3 nth($radius, 3) * 3 nth($radius, 4) * 3;
      } @else {
        border-radius: $radius * 3;
      }
    }
  }
}

/**
   * @description 由于 SASS 拼接的特性，需要将数字强制再转换成纯数字
   */
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not(index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

@function to-length($value, $unit) {
  $units: (
    'px': 1px,
    'cm': 1cm,
    'mm': 1mm,
    '%': 1%,
    'ch': 1ch,
    'pc': 1pc,
    'in': 1in,
    'em': 1em,
    'rem': 1rem,
    'pt': 1pt,
    'ex': 1ex,
    'vw': 1vw,
    'vh': 1vh,
    'vmin': 1vmin,
    'vmax': 1vmax,
  );

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}
