import{_ as e,c as s,o as d,a as t}from"./app.17fb9f66.js";const m=JSON.parse('{"title":"组件说明","description":"","frontmatter":{},"headers":[{"level":2,"title":"需要提前进行引入的文件","slug":"需要提前进行引入的文件","link":"#需要提前进行引入的文件","children":[]},{"level":2,"title":"组件公有属性统一说明","slug":"组件公有属性统一说明","link":"#组件公有属性统一说明","children":[{"level":3,"title":"design","slug":"design","link":"#design","children":[]},{"level":3,"title":"style | []Style","slug":"style-style","link":"#style-style","children":[]}]}],"relativePath":"frontend-common-guide/vue3/components/Mobile/README.md","lastUpdated":1675835613000}'),a={name:"frontend-common-guide/vue3/components/Mobile/README.md"},c=t('<h1 id="组件说明" tabindex="-1">组件说明 <a class="header-anchor" href="#组件说明" aria-hidden="true">#</a></h1><h2 id="需要提前进行引入的文件" tabindex="-1">需要提前进行引入的文件 <a class="header-anchor" href="#需要提前进行引入的文件" aria-hidden="true">#</a></h2><p>在使用前，你需要提前从公共库进行引入这么几个文件：</p><ul><li><code>_variable.scss</code>：变量名（从 webpack、vite 配置里注入）</li><li><code>_utils.scss</code>：混入工具包（从 webpack、vite 配置里注入）</li><li><code>common-class.scss</code>：公共的 class 样式（在入口处引入，已做前缀添加，保证唯一性）</li></ul><h2 id="组件公有属性统一说明" tabindex="-1">组件公有属性统一说明 <a class="header-anchor" href="#组件公有属性统一说明" aria-hidden="true">#</a></h2><p>某些组件有统一的属性，在文档中不会单独罗列出来进行说明，只在属性中标明是否具有。</p><h3 id="design" tabindex="-1">design <a class="header-anchor" href="#design" aria-hidden="true">#</a></h3><p><code>design</code> 标明了当前的组件是按照多少的设计图宽度进行处理的，默认是<code>375</code>，如果你是其他设计宽度则需要传入修复。</p><blockquote><p>注：这里的 <code>design</code> 知识对于 <code>js</code> 逻辑的，如果你想要 <code>css</code> 也是按照对应设计图宽度走，请从 <code>postcss</code> 配置处进行动态修改（识别路径）。</p></blockquote><h3 id="style-style" tabindex="-1">style | []Style <a class="header-anchor" href="#style-style" aria-hidden="true">#</a></h3><p>虽然组件都是按照 UI 规范进行开发的，但是免不了设计图会出现一些特殊情况，所以针对一些场景会暴露一些属性用于<code>style</code>样式注入，进行快速修改样式（当然你也可以选择使用样式穿透）。</p>',11),l=[c];function i(o,n,r,h,_,p){return d(),s("div",null,l)}const g=e(a,[["render",i]]);export{m as __pageData,g as default};
